#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
This script takes an integer argument (as a string) and does three things:
1. Wait for 5 sec
2. Write the full path to a file in a directory specified by the input argument
3. Show environment variables such as PID, CPU number, time elapsed, etc

The script is useful for verifying how SLURM dispatches jobs and can be tweaked as
needed. A fake error can be generated by uncommenting the last few lines to show output
in STDERR.

@author: py01
"""
# Built-in module for parsing command line arguments
from sys import argv

# Stuff rest of the script does
from time import sleep  # Do nothing
from os import getpid, getenv  # Identify processes and env variables
import psutil  # More process info / CPU number
from datetime import datetime  # Precise timings
from pathlib import Path  # IO path management

# This is the working directory, can be inherited using getenv/argv
basedir = Path("/home/py01/slurmtest/data")

# Print input argument, PID, CPU number and current time
print(
    f"Argument: {argv[1]} | PID: {getpid()} | CPU: {psutil.Process().cpu_num()}\t>>> Start: {datetime.now().time()} ->",
    end=" ",
)

# Do nothing for 5 sec
sleep(5)

# Write to a file for no reason
file = basedir / argv[1] / "dat"
file.write_text(str(file))

# Print current time, 5 sec should have elapsed
print(f"End: {datetime.now().time()}\t OK")

# Loop over environment variables of interest, fetch using getenv and print
strings = []
for var in [
    "SLURM_JOB_ID",
    "SLURM_JOB_NAME",
    "SLURM_PROCID",
    "SLURM_TASK_PID",
]:
    val = getenv(var)
    if not val:  # If variable not present, use empty string
        val = ""
    print(f"{var}: {val}", end="\t")

print("\n")

# Throw an example error visible in STDERR
#if int(argv[1]) % 2 == 0:
#    raise ValueError("Even argument encountered!")
